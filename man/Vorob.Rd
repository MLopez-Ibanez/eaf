% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vorob.R
\name{vorobT}
\alias{vorobT}
\alias{vorobDev}
\alias{symDifPlot}
\alias{symDifPlot2}
\alias{symDifPlot3}
\title{Vorob'ev computations}
\usage{
vorobT(x, reference)

vorobDev(x, VE, reference)

symDifPlot(x, VE, threshold, add = FALSE, nlevels = 21, ve.col = "red",
  ve.lwd = 3, ve.lty = "dashed")

symDifPlot2(x, VE, threshold, add = FALSE, nlevels = 21, ve.col = "red",
  ve.lwd = 3, ve.lty = "dashed")

symDifPlot3(x, VE, threshold, add = FALSE, nlevels = 21, ve.col = "red",
  ve.lwd = 3, ve.lty = "dashed", type = "area")
}
\arguments{
\item{x}{Either a matrix of data values, or a data frame, or a list of data
frames of exactly three columns.  The third column is assumed to give the
run identifier, from 1 to the number of runs.}

\item{reference}{Reference point as a vector of numerical values.}

\item{VE, threshold}{Vorob'ev expectation and threshold, e.g., as returned
by \code{\link[eaf]{vorobT}}.}

\item{add}{if \code{FALSE}, a new graph is created}

\item{nlevels}{number of levels in which is divided the range of the
symmetric deviation}

\item{VE, threshold}{Vorob'ev expectation and threshold, e.g., as returned
by \code{\link[eaf]{vorobT}}.}

\item{nlevels}{number of levels in which is divided the range of the
symmetric deviation}

\item{add}{if \code{FALSE}, a new graph is created}

\item{VE, threshold}{Vorob'ev expectation and threshold, e.g., as returned
by \code{\link[eaf]{vorobT}}.}

\item{nlevels}{number of levels in which is divided the range of the
symmetric deviation}

\item{add}{if \code{FALSE}, a new graph is created}
}
\value{
\code{vorobT} returns a list with elements \code{threshold} and
  \code{VE}

\code{vorobdev} returns the Vorob'ev deviation.
}
\description{
Compute Vorob'ev threshold, expectation and deviation. Also, displaying the
symmetric deviation function is possible.  The symmetric deviation
function is the probability for a given target in the objective space to
belong to the symmetric difference between the Vorob'ev expectation and a
realization of the (random) attained set.
}
\note{
Are x's supposed to be sets of Pareto optimal points?
}
\examples{
data(gcp2x2)
data_t <- as.matrix(subset(gcp2x2, alg != "TSinN1" & inst == "DSJC500.5", c("time", "best", "run")))
res <- vorobT(data_t, reference = c(2, 200))
print(res$threshold)

# Display Vorob'ev expectation
eafplot(data_t[,1:2], sets = data_t[,3], percentiles = c(0, 25, 50, 75, 100, res$threshold))

# Now print Vorob'ev deviation
VD <- vorobDev(data_t, res$VE, reference = c(2, 200))
print(VD)

# Now display symmetric deviation function
symDifPlot(data_t, res$VE, res$threshold, add = FALSE, nlevels = 21)

# Now display symmetric deviation function
symDifPlot2(data_t, res$VE, res$threshold, add = FALSE, nlevels = 21)

# Now display symmetric deviation function
symDifPlot3(data_t, res$VE, res$threshold, add = FALSE, nlevels = 21)

}
\references{
M. Binois, D. Ginsbourger and O. Roustant (2015), Quantifying Uncertainty
on Pareto Fronts with Gaussian process conditional simulations, European
Journal of Operational Research, 243(2), 386-394.

C. Chevalier (2013), Fast uncertainty reduction strategies relying on
Gaussian process models, University of Bern, PhD thesis.

I. Molchanov (2005), Theory of random sets, Springer.
}
\author{
Mickael Binois
}
