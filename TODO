 * Use eaxis for prettier labels.
 * If the plots were based on ggplot2, we could use plotly to make them
   interactive:
   https://ggplot2.tidyverse.org/articles/extending-ggplot2.html
 * Make examples run faster (make data smaller). Move current examples
   to tests/
 * Fix all FIXMEs
 * eafplot.default and .plot.eafdiff.side duplicate a lot of code.
 * Create eafdiff plots with a single plot using two different colors.
 * Profile memory/computation time to find bottle-necks.
 * Implement fast algorithms from:
 
    M. T. Jensen. Reducing the run-time complexity of multiobjective EAs: The
    NSGA-II and other algorithms. IEEE Transactions on Evolutionary Computation,
    7(5):503â€“515, 2003.
 * Reimplement eafdiff.pl and eafplot.pl in Python/R
 * Convert eaf->attained to a bitmask.
 * Second order eaf-test: https://github.com/hjalves/eaftest
 * Use plot_ly to plot in 3D and parallel coordinates
 * Use heatmaps to plot in 3D (when comparing 2 algorithms plot the minimum
   value between the two).
 * Interactive EAF:
 
 plot(cars) # scatterplot
while(TRUE) {
  coord <- locator(n=2,type="p", pch=4,col='red',lwd=2)
  print(coord)
  if (is.null(coord)) break
  plot(cars, xlim = range(coord$x), ylim = range(coord$y))
  points(as.data.frame(coord), pch=4,col='blue',lwd=2)
}
