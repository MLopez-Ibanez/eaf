README file for developers
===========================

To use R-hub, you need to validate your email:

install.packages("rhub")
library(rhub)
validate_email()


RELEASE Process:

1. git pull --rebase # to get the latest version

2. "make check" passes

3. "make cran" passes

4. make releasebuild # Inspect the output for strange files!

5. "make winbuild" "make macbuild", "make remotecran" passes. Wait for email and check logs!

6. make closeversion

7. make submit

* IF the package requires further changes:

  * Make the changes.

  * Repeat the whole RELEASE process above without changing the version number.

* IF the package is released in CRAN:

  8. Bump the version number in DESCRIPTION and NEWS.md

  9. make build # To update other files with the new version."

  10.  git ci -a  -m "Bump development version to $NEW_VERSION



Submission email
================
To: cran@R-project.org
Subject: CRAN submission $PACKAGE $VERSION

Dear CRAN maintainers,

I would like to submit version $VERSION of the $PACKAGE package to CRAN.

Regarding this NOTE:

* checking compiled code ... NOTE
File ‘eaf/libs/eaf.so’:
  Found ‘___stderrp’, possibly from ‘stderr’ (C)
    Objects: ‘eaf/io.o’, ‘mo-tools/hv.o’
  Found ‘___stdoutp’, possibly from ‘stdout’ (C)
    Object: ‘eaf/io.o’
Flavors: r-release-macos-x86_64, r-oldrel-macos-x86_64

The same user-code is compiled for all operating systems. There is no conditional code depending on OS. This NOTE only happens for MacOS. My conclusion is that the C-library used by Clang in MacOS seems to pull stderr/stdout into user code even if the user does not use stderr/stdout. I do not know what I can do to avoid this. There are no uses of stderr/stdout in my code when compiled as an R package.

The other NOTE:

Check: installed package size
Result: NOTE
     installed size is 6.4Mb
     sub-directories of 1Mb or more:
     bin 3.4Mb
     extdata 1.7Mb
Flavors: r-devel-windows-x86_64-new-UL, r-release-windows-ix86+x86_64, r-oldrel-windows-ix86+x86_64

The package installs some optional command-line tools. For some reason unknown to me, these executables are larger in Windows than in other OSs. They are built from the same source code.

GNU make is a SystemRequirements because of the Makefiles used to build the various pieces of code under src/.

Thanks in advance,

    Manuel López-Ibáñez.
    
Sanitizers
==========

sudo apt install docker.io
sudo groupadd docker
sudo gpasswd -a $USER docker
newgrp docker
docker run --rm -ti -v /home/manu/work/perfassess/eaf/R/:/host rocker/r-devel-san /bin/bash


apt update
apt install libssl-dev
apt install r-cran-modeltools  r-cran-devtools
Rscript -e 'install.packages("roxygen2")'
mkdir ~/.R/
echo > ~/.R/Makevars <<EOF
CC = gcc -std=gnu99 -fsanitize=address,undefined,signed-integer-overflow -fno-omit-frame-pointer
CXX = g++ -fsanitize=address,undefined,signed-integer-overflow -fno-omit-frame-pointer
MAIN_LDFLAGS = -fsanitize=address,undefined,signed-integer-overflow
EOF
export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.4
export NOT_CRAN=true
cd /host
R CMD build git && R CMD check eaf_1.9.tar.gz  --run-dontrun --run-donttest --as-cran

# On a different shell
docker ps
docker commit CONTAINER_ID manu/r-devel-san
